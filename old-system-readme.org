* Dependency Injection for Yo-yo

Yo-yo System is a dependency injection library that sits on top of
Yo-yo. It's similar to the dependency injection side of Component, but
with a couple of key benefits:

- You don't /have/ to use protocols/records (although you can if you
  wish) - plain old data structures work fine.
- We remove the need for a 'constructed, but not started' state
- We remove the need for separate start/stop functions - no need to
  ~assoc~ the opened resource into a record, and get it out again in a
  different function to stop it.

** Installing

Add the following to your build tool of choice:

#+BEGIN_SRC clojure
  [jarohen/yoyo.system "0.0.1"]
#+END_SRC

** Contents                                                            :TOC_2_gh:

 - [[#making-a-single-component][Making a single component]]
 - [[#testing-our-component][Testing our component]]
 - [[#running-our-first-system][Running our first system]]
 - [[#accessing-the-running-system][Accessing the running system]]
 - [[#using-protocolsrecords-as-components][Using Protocols/Records as components]]

** Making a single component

We start with a single component managing the lifecycle of a
resource - say, a database pool.

Instead of a protocol with start/stop functions, we assume that there
exists a 'latch' function that, when called, 'waits for the system to
stop' before returning. This means that we can start our resource,
call the function, then stop the resource.

We pass our started resource to the latch function, so that other
components can use it.

*Our component, therefore, is a function accepting two parameters: a
 map of our already started dependencies, and the latch function.*

For our database pool, let's assume we have a single dependency: a map
of database configuration under the key ~:db-config~:

#+BEGIN_SRC clojure
  (ns myapp.db)

  (defn with-db-pool [{:keys [db-config]} f]
    (let [db-pool (start-pool! db-config)]
      (try
        (f db-pool)

        (finally
          (stop-pool! db-pool)))))
#+END_SRC

A few notes:

- Normally, I'd inline ~start-pool!~ and ~stop-pool!~ into this
  function - see [[https://github.com/james-henderson/yoyo/blob/master/jdbc-pool/src/yoyo/jdbc_pool.clj][Yo-yo's JDBC pool module]] for a full example.
- The started ~db-pool~ resource is in scope of the 'stop' part of the
  function - no need for a separate function.
- There's no dependency on anything yoyo-related here!
- You can validate the parameters to your component function against a
  [[https://github.com/Prismatic/schema][Schema]] - they're all present and started by this point.

** Testing our component

We can test this component by calling it directly, with the
configuration it needs, but we need to also pass a latch function. In
this case, the 'lifetime of the system' is simply the time it takes to
run our tests - so the 'latch function' just runs the tests, and
returns:

#+BEGIN_SRC clojure
  (require '[clojure.test :refer :all]
           '[myapp.db :as db])

  (deftest test-db-pool
    (db/with-db-pool {:db-config ...}
      (fn [db-pool]
        ;; what would you like to test?
        )))
#+END_SRC

** Running our first system

Later, we'll go over using Yo-yo's REPL-based start/stop functions,
but for now we can use Yo-yo's ~run-system!~ to run our first system.

~run-system!~ takes in a function accepting a 'latch', and returns a
promise - deliver any value to that promise to stop the system. For
more information on ~run-system!~, please see the [[https://github.com/james-henderson/yoyo][main Yo-yo README]].

*** Making the system map

To get such a function for our system, we'll need to use
~yoyo.system/make-system~ - this takes in a function returning a
dependency map, similar to Component's system map. Each value in the
map should be either:

- a 2-arg function, accepting a map of its dependencies, and a latch
  function (this should sound familiar!)
- a constant value (e.g. a configuration map)

(Incidentally, ~make-system~ takes in a function so that it refreshes
the map every time the system is run - e.g. to reload your
configuration)

#+BEGIN_SRC clojure
  (require '[yoyo.system :as ys]
           '[myapp.db :as db])

  (ys/make-system (fn []
                    {:db-pool (-> db/with-db-pool
                                  ;; TODO wire in :db-config dependency
                                  )}))
#+END_SRC

We still need to:

- declare the ~:db-config~ dependency
- run the system

*** Declaring dependencies

We can declare dependencies using ~yoyo.system/using~ - this takes a
map from the key expected by our component, to a path into the system
map that satisfies the dependency. Let's say our configuration map
looks like:

#+BEGIN_SRC clojure
  {:db {:host "..."
        :port ...
        ...}

   ...}
#+END_SRC

We can then add this as another entry in the dependency map:

#+BEGIN_SRC clojure
  (ys/make-system (fn []
                    {:config (read-config ...)

                     :db-pool (-> db/with-db-pool
                                  ;; TODO wire in :db-config dependency
                                  )}))
#+END_SRC

We then use ~yoyo.system/using~ to declare the dependencies that
~:db-pool~ requires. Our component expects a ~:db-config~ key, which
could be found at ~(get-in <the-system> [:config :db])~, so the
dependency map for the ~:db-pool~ is ~{:db-config [:config :db]}~,
which we include in the dependency map as follows:

#+BEGIN_SRC clojure
  (ys/make-system (fn []
                    {:config (read-config ...)

                     :db-pool (-> db/with-db-pool
                                  (ys/using {:db-config [:config :db]}))}))
#+END_SRC

*** Components without lifecycles

Some components don't need to have a lifecycle - they might just build
on components that do. When we get such a component, they don't need
to take in the latch function (because they've nothing to start/stop)
so, as long as we let ~make-system~ know (by augmenting the component
function with ~ys/without-lifecycle~), we can provide it a function
that accepts the dependency map, and returns the composite component:

#+BEGIN_SRC clojure
  (defn make-composite-component [{:keys [db-pool, ...] :as dependencies}]
    ;; return the composite component
    )

  (ys/make-system (fn []
                    {:config (read-config ...)

                     :db-pool (-> db/with-db-pool
                                  (ys/using {:db-config [:config :db]}))

                     :composite-component (-> make-composite-component
                                              ys/without-lifecycle
                                              (ys/using {:db-pool [:db-pool]
                                                         ...}))}))
#+END_SRC

*** Testing the whole system:

~yoyo.system/make-system~ returns a function that accepts a latch so,
in a similar vein to testing a single component, we can use this to
test the whole system:

#+BEGIN_SRC clojure
  (def with-our-system
    (ys/make-system (fn []
                      {:config (read-config ...)

                       :db-pool (-> db/with-db-pool
                                    (ys/using {:db-config [:config :db]}))})))

  (deftest test-whole-system
    (with-our-system
      (fn {:keys [config db-pool]}
        ;; what do you want to test?
        )))
#+END_SRC

By altering the dependency map, you can also test parts of the system,
as necessary - it's just a map, after all!

*** Running the system

Again, using the fact that ~yoyo.system/make-system~ returns a
function that accepts a latch, we can pass the result straight to
~yoyo/run-system!~ to run the system:

#+BEGIN_SRC clojure
  (require '[yoyo :as y]
           '[myapp.db :as db])

  (def system-promise
    (y/run-system! (ys/make-system (fn []
                                     {:config (read-config ...)

                                      :db-pool (-> db/with-db-pool
                                                   (ys/using {:db-config [:config :db]}))}))))
#+END_SRC

We then ~(deliver system-promise nil)~ to stop the system.

We can also use Yo-yo's ~set-system-fn!~, to use Yo-yo's REPL-based
~yoyo/start!~, ~yoyo/stop!~ and ~yoyo/reload!~ functions:

#+BEGIN_SRC clojure
  (ns myapp.main
    (:require [myapp.db :as db]
              [yoyo :as y]
              [yoyo.system :as ys]))

  (def make-system
    (ys/make-system (fn []
                      {:config (read-config ...)

                       :db-pool (-> db/with-db-pool
                                    (ys/using {:db-config [:config :db]}))})))

  (defn -main [& args]
    (y/set-system-fn! 'myapp.main/make-system)

    (y/start!))

  ;; Later, at the REPL

  (yoyo/stop!)
  (yoyo/start!)

  (yoyo/reload!)
#+END_SRC

** Accessing the running system

For debugging purposes, it'd be great if we could access the system
while it's running. We can do this by putting the started system to an
accessible var (say ~user/system~) using
~yoyo.system/with-system-put-to~:

#+BEGIN_SRC clojure
  (ns myapp.main
      (:require [myapp.db :as db]
                [yoyo :as y]
                [yoyo.system :as ys]))

  (def make-system
    (-> (ys/make-system (fn []
                          {:config (read-config ...)

                           :db-pool (-> db/with-db-pool
                                        (ys/using {:db-config [:config :db]}))}))

        (ys/with-system-put-to 'user/system)))

  (defn -main [& args]
    (y/set-system-fn! 'myapp.main/make-system)

    (y/start!))

  ;; Later, at the REPL

  (:db-pool user/system) ;; => returns the database pool
#+END_SRC

** Using Protocols/Records as components

While we don't /have/ to use protocols/records, we may find them
useful in order to be able to swap out the behaviour when testing.

Let's say we want to maintain a list of users using the database pool
we created earlier, and serve them up through a handler. We'll need:

- A protocol representing the functionality required to maintain the
  list of users
- A 'real' implementation of that protocol
- A handler using an instance of the protocol
- A dependency map that wires it all up
- Some tests for the handler, using a mock implementation

*** First, the protocol, and its 'real' implementation

#+BEGIN_SRC clojure
  (ns myapp.users)

  (defprotocol UserRepository
    (get-users [_])
    (get-user [_ user-id])
    (create-user! [_ user])
    (update-user! [_ user-id updated-user])
    (delete-user! [_ user-id]))

  (defrecord UserRepositoryComponent [db-pool]
    UserRepository
    (list-users [_]
      ...)

    (get-user [_ user-id]
      ...)

    (create-user! [_ user]
      ...)

    (update-user! [_ user-id updated-user]
      ...)

    (delete-user! [_ user-id]
      ...))
#+END_SRC

Note that the ~db-pool~ passed to the record here is:

- not nil, at any point, even at record construction
- started, even at record construction

This means that the parameters to the record are able to be validated
against a [[https://github.com/Prismatic/schema][Schema]] at record-construction time, removing the need for
the workarounds described in JUXT's [[http://blog.juxt.pro/posts/component-meet-schema.html]['Component, meet Schema']] blog.

*** Next, the handler:

#+BEGIN_SRC clojure
  (ns myapp.handler
    (:require [myapp.users :as u]
              [compojure.route :refer [context routes GET PUT POST DELETE]]
              [ring.util.response :refer [response status]]))

  ;; TODO validation, authentication, authorization, and all of that
  ;; good stuff

  (defn make-handler [{:keys [user-repo]}]
    (routes
      (context "/users" []
        (GET "/" []
          (response (u/get-users user-repo)))

        (POST "/" {:as req}
          (u/create-user! user-repo (:body req))
          (-> (response :created)
              (status 201)))

        (context "/:user-id" [user-id]
          (GET "/" []
            (response (u/get-user user-repo user-id)))

          (PUT "/" {:as req}
            (u/update-user! user-repo user-id (:body req))
            (response :updated))

          (DELETE "/" []
            (u/delete-user! user-repo user-id)
            (-> (response :deleted)
                (status 204)))))))
#+END_SRC

The handler doesn't need a lifecycle, either, so we can just accept
the dependency map and return the handler (remembering to use
~ys/without-lifecycle~ when we include it in the dependency map)

*** The dependency map

The dependency map looks something like this:

#+BEGIN_SRC clojure
  (require '[myapp.db :as db]
           '[myapp.users :as u]
           '[myapp.handler :as h]
           '[yoyo.system :as ys])

  {:config (read-config ...)

   :db-pool (-> db/with-db-pool
                (ys/using {:db-config [:config :db]}))

   :user-repo (-> u/map->UserRepositoryComponent
                  ys/without-lifecycle
                  (ys/using {:db-pool [:db-pool]}))

   :handler (-> h/make-handler
                ys/without-lifecycle
                (ys/using {:user-repo [:user-repo]}))}
#+END_SRC

We can use ~u/map->UserRepositoryComponent~ directly here - after all,
it's a function that takes in a map of dependencies and returns a
component which, combined with ~ys/without-lifecycle~, is valid as an
entry in our dependency map.

I'm probably preaching to the choir, here, but let's have three cheers
for function composition :)

*** Testing the handler

The handler itself is just a function accepting a ~UserRepository~, so
we can test it as such, providing a mocked-out implementation:

#+BEGIN_SRC clojure
  (require '[clojure.test :refer :all]
           '[myapp.handler :refer :all]
           '[myapp.users :as u])

  (deftest test-the-handler
    (let [mock-user-repo (reify u/UserRepository
                           ...)
          handler (make-handler {:user-repo mock-user-repo})]

      ;; what do you want to test?

      ))
#+END_SRC

** Questions/comments/thoughts/ideas?

Yes please! I can be contacted through here, Gitter, Slack, email,
Twitter, etc, etc

** Bug reports/PRs

Yes please to these too! Please submit them through GitHub in the
usual way.

Thanks!

** LICENCE

Copyright © 2015 James Henderson

Yo-yo, and all modules within this repo, are distributed under the
Eclipse Public License - either version 1.0 or (at your option) any
later version.
